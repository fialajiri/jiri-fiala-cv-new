/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a message to the chat
         * @description Process a user message and return an AI response with updated conversation history
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "message": "Hello, how are you?",
                     *       "history": []
                     *     } */
                    "application/json": components["schemas"]["ChatRequest"];
                };
            };
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Hello! I'm doing well, thank you for asking. How can I help you today?",
                         *       "history": [
                         *         {
                         *           "role": "user",
                         *           "content": "Hello, how are you?"
                         *         },
                         *         {
                         *           "role": "assistant",
                         *           "content": "Hello! I'm doing well, thank you for asking. How can I help you today?"
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad request - validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Message cannot be empty"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Internal server error"
                         *     } */
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Simple health check to verify the API is running
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API is running */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ChatMessage: {
            /**
             * @description The role of the message sender
             * @enum {string}
             */
            role: "user" | "assistant" | "system";
            /** @description The content of the message */
            content: string;
        };
        ChatRequest: {
            /** @description The user message to process */
            message: string;
            /**
             * @description Previous conversation history
             * @default []
             */
            history: components["schemas"]["ChatMessage"][];
        };
        ChatResponse: {
            /** @description The assistant response message */
            message: string;
            /** @description Updated conversation history including the new messages */
            history: components["schemas"]["ChatMessage"][];
        };
        Error: {
            /** @description Error message */
            error: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
